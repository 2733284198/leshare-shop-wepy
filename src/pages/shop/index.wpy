<template>
  <view class="container column" wx:if="{{init}}">

    <!-- 店铺信息区域 -->
    <ShopHeader :shop.sync="shop" />

    <!--功能区域-->
    <ShopNav :badegText.sync="badegText" :title.sync="title"  navText="我的" navUrl="../order/list" navType="navigate"/>
    <!--主内容区域-->
    <view class="main-box row">
      <!--分类侧边栏-->
      <SideTab :tab.sync="categories" @change.user="switchTab" />

      <!--右侧滚动-->
      <scroll-view scroll-y class="goods-box" bindscrolltolower="onReachBottom">
        <!--卡券区域（只在推荐的时候展现）-->
        <scroll-view scroll-x	class="coupon-box" wx:if="{{categories.selectedId==-1 && coupons.length > 0}}">
          <repeat for="{{coupons}}" key="index" index="index" item="item">
            <CouponItem :coupon.sync="item" @pick.user="pickCoupon" />
          </repeat>
        </scroll-view>

        <!--分类名称-->
        <view class="goods-title row">
          <text class="weak">{{selectedCategoryName}}</text>
        </view>

        <!--商品列表-->
        <view class="goods-list">
          <repeat for="{{page.list}}" key="index" index="index" item="item">
            <GoodsItem :goods.sync="item" @plus.user="plus" @minus.user="minus" @detail.user="detail"/>
          </repeat>
        </view>

        <Loadmore :page.sync="page" emptyText="暂无商品"/>
      </scroll-view>
    </view>

    <!--商品详情区域-->
    <scroll-view  class="goods-detail-box" scroll-y	 wx:if="{{detailDisplay}}">

      <!--返回按钮-->
      <view class="back-btn column-center">
        <image src="/images/icons/back.png" @tap="detaiLBack" />
      </view>

      <!-- 轮播图 -->
      <swiper class="goods-swiper" indicator-dots="true" autoplay="true" interval="5000" @tap="previewDetailSwiper">
        <block wx:for="{{detail.images}}" wx:key="id">
          <swiper-item>
            <image src="{{item.url}}" mode="aspectFill"></image>
          </swiper-item>
        </block>
      </swiper>

      <!--信息区域-->
      <view class="info-box column">
        <view class="row">
          <view class="small label primary" wx:if="{{isRecommend == 1}}">推荐</view>
          <text class="name">{{detail.name}}</text>
        </view>
        <text class="sm muted mt10">已售{{detail.salesVolume}}件</text>
        <view class="price row-between mt10">
          <text class="major xxl">￥{{detail.priceLable}}</text>
          <!--数量选择器-->
          <view class="quantity row mr20">
            <block wx:if="{{detail.num > 0}}">
              <image class="minus" src="/images/icons/minus.png" @tap.stop="detailMinus({{detail}})" />
              <view class="number">
                <text>{{detail.num}}</text>
              </view>
              <image class="plus" src="/images/icons/plus.png" @tap.stop="detailPlus({{detail}})" />
            </block>
            <view class="quantity-cart-btn" wx:else @tap.stop="detailPlus({{detail}})">
              加入购物车
            </view>
          </view>
        </view>
      </view>

      <!--详情区域-->
      <view class="detail-box" wx:if="{{currentDetailList.length > 0}}">
        <!--详情标题-->
        <view class="detail-title row-center">
          <text class="primary lg">── 商品详情 ──</text>
        </view>

        <view class="hr-light"></view>

        <!--详情类列表区域/遍历详情-->
        <view class="detail-list column">
          <block wx:for="{{currentDetailList}}" wx:key="id">
            <!--文本-->
            <text class="mb20 lg" wx:if="{{item.type == 1}}">{{item.content}}</text>
            <!--图片-->
            <image src="{{item.content}}" mode="widthFix" wx:if="{{item.type == 2}}" @tap="previewDetailImages({{item.content}})"/>
          </block>
        </view>
      </view>

    </scroll-view>

    <!-- 购物车 -->
    <ShopCart :carts.sync="carts" :status.sync="status" @plus.user="plus" @minus.user="minus" @clear.user="clear" @buy.user="buy"/>

    <!--SKU选择器-->
    <SkuSelector :display.sync="skuDisplay" :goods.sync="skuGoods" @select.user="selectSku" />

  </view>
</template>

<script>
  import wepy from 'wepy';
  import auth from '../../api/auth';
  import shop from '../../api/shop';
  import goods from '../../api/goods';
  import coupon from '../../api/coupon';
  import order from '../../api/order';
  import base from '../../mixins/base';
  import pagination from '../../mixins/pagination.wpy';
  import SideTab from '../../components/common/side_tab';
  import ShopHeader from '../../components/shop/header';
  import ShopNav from '../../components/shop/nav';
  import CouponItem from '../../components/coupons/simple_item';
  import GoodsItem from '../../components/goods/simple_item';
  import SkuSelector from '../../components/goods/sku_selector';
  import Loadmore from '../../components/weui/loadmore';
  import ShopCart from '../../components/shop/cart';
  import Tips from '../../utils/Tips';
  import Event from '../../utils/Event';
  import Cache from '../../utils/Cache';

  export default class ShopIndex extends wepy.page {
    def = {
      init: false,
      page: {
        list: []
      },
      pages: {},
      detail: {
      },
      details: {},
      shop: {
        notices: []
      },
      status: {},
      notices: [],
      categories: {},
      coupons: [],
      carts: [],
      skuDisplay: 'false',
      detailDisplay: false,
      skuGoods: {},
      title: '在线商城',
      badegText: '商城'
    };
    data = {...this.def};
    async onLoad ({goodsId}) {
      // -- 用户信息
      await auth.user();
      // -- 缓存信息
      // 加载店铺信息
      this.shop = await Cache.shop();
      this.shop.notices = await Cache.notices();
      // 店铺类型
      const type = shop.type();
      this.title = type.name;
      this.badegText = type.badgeText;
      wepy.setNavigationBarTitle({ title: type.name });
      // 店铺状态
      await this.loadStatus();
      // 加载商品分类
      this.categories = await Cache.categories();
      // -- 需要实时加载的信息
      // 购物车
      const carts = wepy.getStorageSync('carts');
      this.carts = carts == '' ? [] : carts;
      // 加载商品
      this.page = goods.page(true);
      await this.next();
      // 检查是否没有推荐商品
      if (this.page.list.length == 0) {
        if (this.categories.list[0].id == -1) {
          this.categories.list.splice(0, 1);
        }
        this.categories.selectedId = this.categories.list[0].id;
        this.page = goods.page(false);
        await this.next();
      }
      // 处理推荐跳转
      if (goodsId) {
        const detail = this.methods.detail.bind(this);
        detail({id: goodsId});
      }
      // -- 监听事件
      Event.listen(Event.COUPON_LIST_UPDATE, this.loadCoupons.bind(this), this);
      Event.listen(Event.CART_LIST_CLEAR, this.doClear.bind(this), this);
      this.loaded();

      // -- 异步加载的信息
      // 加载优惠券
      Tips.setLoading();
      Cache.coupon().then(({pickList}) => {
        this.coupons = pickList;
        this.loaded();
      });
    };
    async onShow () {
      if (this.init) {
        // 重新判断店铺状态
        Tips.setLoading();
        await this.loadStatus();
        this.loaded();
      }
    }
    onShareAppMessage () {
      return {};
    }
    // 分页加载完毕
    onPageLoad() {
      this.pages[this.categories.selectedId] = this.page;
      this.setGoodsNum();
      this.setCategoryNum();
    }
    // 分页参数
    params() {
      return {category_id: this.categories.selectedId};
    }
    // 设置商品分类的数量
    setCategoryNum() {
      this.categories.list.forEach(item => {
        item.count = 0;
        this.carts.forEach(cart => {
          if (cart.shopCategory && item.id == cart.shopCategory) {
            item.count += cart.goodsNum;
          }
        });
      });
    }
    // 设置商品列表的数量
    setGoodsNum() {
      // 处理商品列表
      this.page.list.forEach(goods => {
        goods.num = this.countCartGoodNum(goods.id);
      });
      // 处理商品详情
      if (this.detail) {
        this.detail.num = this.countCartGoodNum(this.detail.id);
      }
    }
    // 同步数量
    countCartGoodNum(goodsId) {
      let num = 0;
      this.carts.forEach(cart => {
        if (cart.goodsId == goodsId) {
          num += cart.goodsNum;
        }
      });
      return num;
    }
    // 更新卡券
    async loadCoupons() {
      const {pickList} = await Cache.coupon(true);
      this.coupons = pickList;
      this.$apply();
    }
    // 更新状态
    async loadStatus() {
      this.status = await Cache.status();
      this.title = this.status.open ? shop.type().name : this.status.closeTips;
      if (!this.init && !this.status.open) {
        Tips.modal(this.status.closeTips);
      }
    }
    methods = {
      switchTab() {
        Tips.setLoading();
        const selectedId = this.categories.selectedId;
        // 先判断缓存中是否存在商品列表
        if (this.pages[selectedId] && this.pages[selectedId].list.length > 0) {
          this.page = this.pages[selectedId];
          this.setGoodsNum();
          this.loaded();
        } else {
          this.page = goods.page(selectedId == -1);
          this.reload();
        }
      },
      async selectSku(sku) {
        const plus = this.methods.plus.bind(this);
        plus(sku);
      },
      /**
       * 领取优惠券
       */
      async pickCoupon({id}) {
        try {
          await coupon.pick(id);
          await Tips.success('领取成功');
          // 加载优惠券
          const {pickList} = await Cache.coupon(true);
          this.coupons = pickList;
          Tips.loaded();
          this.$apply();
        } catch (e) {
          Tips.loaded();
          if (e.serverCode == '50001') {
            Tips.alert('已达领取上限');
            const index = this.coupons.findIndex(item => item.id == id);
            this.coupons.splice(index, 1);
            this.$apply();
          }
        }
      },
      /**
       * 增加商品
       */
      async plus({goodsId, goodsSku}) {
        // 商品里列表
        const goods = this.findGoods(goodsId);
        if (goods) {
          if (goods.goodsSkuInfo && goodsSku == null) {
            await this.skuSelector(goodsId);
            return;
          }
        }
        // 购物车
        const target = this.findCart(goodsId, goodsSku);
        if (target) {
          // 购物车中已存在
          target.goodsNum = target.goodsNum + 1;
          target.totalPrice = (target.goodsNum * target.goodsPrice).toFixed(2);
        } else {
          // 购物车中不存在
          let goodsPrice;
          if (goodsSku) {
            const skuInfo = goods.goodsSkuInfo.goodsSkuDetails.find(item => item.sku == goodsSku);
            goodsPrice = skuInfo.goodsSkuDetailBase.price;
          } else if (goods) {
            goodsPrice = goods.sellPrice;
          } else if (this.detail && this.detail.id == goodsId) {
            goodsPrice = this.detail.sellPrice;
          }
          goodsPrice = goodsPrice.toFixed(2);
          this.carts.push({
            goodsId: goodsId,
            goodsSku: goodsSku,
            goodsName: goods.name,
            shopCategory: goods.innerCid,
            goodsImage: goods.imageUrl,
            goodsPrice: goodsPrice,
            goodsNum: 1,
            totalPrice: goodsPrice
          });
        }
        // 重置数据
        this.setGoodsNum();
        this.setCategoryNum();
        this.saveCartStore();
        this.skuGoods = {};
        this.loaded();
      },
      /**
       * 减少商品
       */
      async minus({goodsId, goodsSku}) {
        // 商品对象
        const goods = this.findGoods(goodsId);
        // 特殊情况，商品已经不足1个
        if (goods && goods.num < 1) {
          return;
        }
        // 若果购物车有多个对象，但是goodsSku 为空，那么则无法操作
        const count = this.countCart(goodsId);
        if (count > 1 && goodsSku == null) {
          Tips.alert('请在购物车操作');
          return;
        }
        // 购物车对象
        const target = this.findCart(goodsId, goodsSku);
        if (target.goodsNum == 1) {
          this.removeCart(goodsId, target.goodsSku);
        } else {
          target.goodsNum -= 1;
          target.totalPrice = (target.goodsNum * target.goodsPrice).toFixed(2);
        }
        // 重置数据
        this.setGoodsNum();
        this.setCategoryNum();
        this.saveCartStore();
        this.loaded();
      },
      /**
       * 清空商品
       */
      async clear() {
        if (this.carts.length < 1) {
          Tips.alert('购物车为空');
          return;
        }
        await Tips.confirm('确认清空购物车？');
        await this.doClear();
      },
      /**
       * 确认购买
       */
      async buy () {
        // 权限校验
        const result = await auth.user({block: true, redirect: false});
        if (!result) return;
        const trade = order.createCartTrade(this.carts);
        const param = {
          trade: JSON.stringify(trade)
        };
        this.$navigate('../order/trade', param);
      },
      /**
       * 商品详情
       */
      async detail({id}) {
        Tips.setLoading();
        this.detail = this.findGoods(id);
        this.detailDisplay = true;
        if (!this.details[id]) {
          this.details[id] = await goods.getInfo(id);
        }
        Tips.loaded();
        this.$apply();
      },
      /**
       * 关闭详情页面
       */
      detaiLBack() {
        this.detailDisplay = false;
        this.detail = null;
      },
      /**
       * 详情页减少商品
       */
      detailMinus(detail) {
        const minus = this.methods.minus.bind(this);
        minus({
          goodsId: detail.id
        });
      },
      /**
       * 详情页面增加商品
       */
      detailPlus(detail) {
        const plus = this.methods.plus.bind(this);
        plus({
          goodsId: detail.id
        });
      },
      /**
       * 预览详情页面
       */
      previewDetailImages(current) {
        const urls = this.currentDetailList.filter(v => v.type == 2).map(v => v.content);
        wepy.previewImage({
          urls: urls,
          current: current
        });
      },
      /**
       * 预览轮播图
       */
      previewDetailSwiper() {
        const urls = this.detail.images.map(value => value.url);
        wepy.previewImage({
          urls: urls
        });
      }
    };
    async doClear() {
      this.carts = [];
      this.setCategoryNum();
      this.setGoodsNum();
      wepy.setStorage({
        key: 'carts',
        data: []
      });
      this.loaded();
    }
    async skuSelector(goodsId) {
      if (this.details[goodsId]) {
        this.skuGoods = this.details[goodsId];
      } else {
        const detail = await goods.getInfo(goodsId);
        this.skuGoods = detail;
        this.details[goodsId] = detail;
      }
      this.skuDisplay = 'true';
      this.loaded();
    }
    saveCartStore() {
      wepy.setStorage({
        key: 'carts',
        data: this.carts
      });
    }
    findGoods(goodsId) {
      return this.page.list.find(item => item.id == goodsId);
    }
    findCart(goodsId, goodsSku) {
      return this.carts.find(item => item.goodsId == goodsId && (goodsSku == null || item.goodsSku == goodsSku));
    }
    countCart(goodsId) {
      let count = 0;
      this.carts.forEach(item => {
        if (item.goodsId == goodsId) {
          count += 1;
        }
      });
      return count;
    }
    removeCart(goodsId, goodsSku) {
      const index = this.carts.findIndex(item => item.goodsId == goodsId && item.goodsSku == goodsSku);
      this.carts.splice(index, 1);
    }
    computed = {
      currentDetailList() {
        if (this.detail && this.details[this.detail.id]) {
          return this.details[this.detail.id].goodsDetails;
        } else {
          return null;
        }
      },
      selectedCategoryName() {
        if (this.init) {
          const selectedId = this.categories.selectedId;
          return this.categories.list.find(item => item.id == selectedId).title;
        }
      }
    };
    components = {
      ShopHeader: ShopHeader,
      SideTab: SideTab,
      CouponItem: CouponItem,
      GoodsItem: GoodsItem,
      ShopNav: ShopNav,
      Loadmore: Loadmore,
      ShopCart: ShopCart,
      SkuSelector: SkuSelector
    };
    mixins = [base, pagination];
    config = {
    };
  }
</script>

<style lang="scss">
  @import "../../styles/variable";

  .main-box{
    width: 100%;
    position: absolute;
    top: 145px;
    bottom: 55px;

    .goods-box{
      flex: 1;
      height: 100%;
      .goods-title{
        height: 30px;
        padding-left: 20rpx;
        align-items: center;
        border-bottom: $border;
      }
      .goods-list{
        background-color: #FFF;
        padding-left: 10px;
      }
    }
    .coupon-box{
      padding: 10px 0 10px 20rpx;
      height: 60px;
      width: 545rpx;
      border-bottom: $border;
      white-space: nowrap;
    }
  }


  .goods-detail-box{
    position: fixed;
    top: 0;
    bottom: 100rpx;
    width: 750rpx;
    background-color: $color-bg-body;

    .back-btn{
      position: fixed;
      bottom: 70px;
      right: 20px;
      background-color: #FFF;
      height: 46px;
      width: 46px;
      border-radius: 50%;
      image{
        height: 40px;
        width: 40px;
      }
    }

    .info-box{
      background-color: #FFF;
      padding: 20rpx;
      border-bottom: $border;
      border-top: $border;
      .name{
        font-size: $text-xxl;
        font-weight: bold;
      }
      .price{
        height: 32px;
      }
    }

    .quantity-cart-btn{
      background-color: $color-primary;
      font-size: $text-sm;
      height: 20px;
      color: #FFF;
      padding: 4px 13px;
      border-radius: 20px;
    }

    .goods-swiper{
      height: 650rpx;
      width: 750rpx;

      image{
        width:100%;
        height:650rpx;
      }
    }

    .detail-box{
      border-top: $border;
      background-color: #FFF;
      margin-top: 20rpx;

      .detail-title{
        height: 75rpx;
      }
      .hr-light{
        height: 1px;
        background-color: #e6e6e6;
        width: 100%;
      }

      .detail-list{
        padding-bottom: 20rpx;
        image{
          width: 100%;
        }
        text{
          padding: 20rpx;
        }
      }
    }
  }

</style>
